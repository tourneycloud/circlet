// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redirectservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_redirectservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_redirectservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_redirectservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_redirectservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redirectservice_2eproto;
namespace circlet {
namespace v1 {
class CreateRedirectRequest;
struct CreateRedirectRequestDefaultTypeInternal;
extern CreateRedirectRequestDefaultTypeInternal _CreateRedirectRequest_default_instance_;
class Redirect;
struct RedirectDefaultTypeInternal;
extern RedirectDefaultTypeInternal _Redirect_default_instance_;
}  // namespace v1
}  // namespace circlet
PROTOBUF_NAMESPACE_OPEN
template<> ::circlet::v1::CreateRedirectRequest* Arena::CreateMaybeMessage<::circlet::v1::CreateRedirectRequest>(Arena*);
template<> ::circlet::v1::Redirect* Arena::CreateMaybeMessage<::circlet::v1::Redirect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace circlet {
namespace v1 {

// ===================================================================

class Redirect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:circlet.v1.Redirect) */ {
 public:
  inline Redirect() : Redirect(nullptr) {}
  ~Redirect() override;
  explicit constexpr Redirect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Redirect(const Redirect& from);
  Redirect(Redirect&& from) noexcept
    : Redirect() {
    *this = ::std::move(from);
  }

  inline Redirect& operator=(const Redirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Redirect& operator=(Redirect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Redirect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Redirect* internal_default_instance() {
    return reinterpret_cast<const Redirect*>(
               &_Redirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Redirect& a, Redirect& b) {
    a.Swap(&b);
  }
  inline void Swap(Redirect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Redirect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Redirect* New() const final {
    return new Redirect();
  }

  Redirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Redirect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Redirect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Redirect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Redirect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "circlet.v1.Redirect";
  }
  protected:
  explicit Redirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromLocationFieldNumber = 1,
    kToLocationFieldNumber = 2,
  };
  // string from_location = 1;
  void clear_from_location();
  const std::string& from_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_location();
  PROTOBUF_MUST_USE_RESULT std::string* release_from_location();
  void set_allocated_from_location(std::string* from_location);
  private:
  const std::string& _internal_from_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_location(const std::string& value);
  std::string* _internal_mutable_from_location();
  public:

  // string to_location = 2;
  void clear_to_location();
  const std::string& to_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_location();
  PROTOBUF_MUST_USE_RESULT std::string* release_to_location();
  void set_allocated_to_location(std::string* to_location);
  private:
  const std::string& _internal_to_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_location(const std::string& value);
  std::string* _internal_mutable_to_location();
  public:

  // @@protoc_insertion_point(class_scope:circlet.v1.Redirect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redirectservice_2eproto;
};
// -------------------------------------------------------------------

class CreateRedirectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:circlet.v1.CreateRedirectRequest) */ {
 public:
  inline CreateRedirectRequest() : CreateRedirectRequest(nullptr) {}
  ~CreateRedirectRequest() override;
  explicit constexpr CreateRedirectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRedirectRequest(const CreateRedirectRequest& from);
  CreateRedirectRequest(CreateRedirectRequest&& from) noexcept
    : CreateRedirectRequest() {
    *this = ::std::move(from);
  }

  inline CreateRedirectRequest& operator=(const CreateRedirectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRedirectRequest& operator=(CreateRedirectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRedirectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRedirectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRedirectRequest*>(
               &_CreateRedirectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRedirectRequest& a, CreateRedirectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRedirectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRedirectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRedirectRequest* New() const final {
    return new CreateRedirectRequest();
  }

  CreateRedirectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRedirectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRedirectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRedirectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRedirectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "circlet.v1.CreateRedirectRequest";
  }
  protected:
  explicit CreateRedirectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectFieldNumber = 1,
  };
  // .circlet.v1.Redirect redirect = 1;
  bool has_redirect() const;
  private:
  bool _internal_has_redirect() const;
  public:
  void clear_redirect();
  const ::circlet::v1::Redirect& redirect() const;
  PROTOBUF_MUST_USE_RESULT ::circlet::v1::Redirect* release_redirect();
  ::circlet::v1::Redirect* mutable_redirect();
  void set_allocated_redirect(::circlet::v1::Redirect* redirect);
  private:
  const ::circlet::v1::Redirect& _internal_redirect() const;
  ::circlet::v1::Redirect* _internal_mutable_redirect();
  public:
  void unsafe_arena_set_allocated_redirect(
      ::circlet::v1::Redirect* redirect);
  ::circlet::v1::Redirect* unsafe_arena_release_redirect();

  // @@protoc_insertion_point(class_scope:circlet.v1.CreateRedirectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::circlet::v1::Redirect* redirect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redirectservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Redirect

// string from_location = 1;
inline void Redirect::clear_from_location() {
  from_location_.ClearToEmpty();
}
inline const std::string& Redirect::from_location() const {
  // @@protoc_insertion_point(field_get:circlet.v1.Redirect.from_location)
  return _internal_from_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Redirect::set_from_location(ArgT0&& arg0, ArgT... args) {
 
 from_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:circlet.v1.Redirect.from_location)
}
inline std::string* Redirect::mutable_from_location() {
  std::string* _s = _internal_mutable_from_location();
  // @@protoc_insertion_point(field_mutable:circlet.v1.Redirect.from_location)
  return _s;
}
inline const std::string& Redirect::_internal_from_location() const {
  return from_location_.Get();
}
inline void Redirect::_internal_set_from_location(const std::string& value) {
  
  from_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Redirect::_internal_mutable_from_location() {
  
  return from_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Redirect::release_from_location() {
  // @@protoc_insertion_point(field_release:circlet.v1.Redirect.from_location)
  return from_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Redirect::set_allocated_from_location(std::string* from_location) {
  if (from_location != nullptr) {
    
  } else {
    
  }
  from_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:circlet.v1.Redirect.from_location)
}

// string to_location = 2;
inline void Redirect::clear_to_location() {
  to_location_.ClearToEmpty();
}
inline const std::string& Redirect::to_location() const {
  // @@protoc_insertion_point(field_get:circlet.v1.Redirect.to_location)
  return _internal_to_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Redirect::set_to_location(ArgT0&& arg0, ArgT... args) {
 
 to_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:circlet.v1.Redirect.to_location)
}
inline std::string* Redirect::mutable_to_location() {
  std::string* _s = _internal_mutable_to_location();
  // @@protoc_insertion_point(field_mutable:circlet.v1.Redirect.to_location)
  return _s;
}
inline const std::string& Redirect::_internal_to_location() const {
  return to_location_.Get();
}
inline void Redirect::_internal_set_to_location(const std::string& value) {
  
  to_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Redirect::_internal_mutable_to_location() {
  
  return to_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Redirect::release_to_location() {
  // @@protoc_insertion_point(field_release:circlet.v1.Redirect.to_location)
  return to_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Redirect::set_allocated_to_location(std::string* to_location) {
  if (to_location != nullptr) {
    
  } else {
    
  }
  to_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:circlet.v1.Redirect.to_location)
}

// -------------------------------------------------------------------

// CreateRedirectRequest

// .circlet.v1.Redirect redirect = 1;
inline bool CreateRedirectRequest::_internal_has_redirect() const {
  return this != internal_default_instance() && redirect_ != nullptr;
}
inline bool CreateRedirectRequest::has_redirect() const {
  return _internal_has_redirect();
}
inline void CreateRedirectRequest::clear_redirect() {
  if (GetArenaForAllocation() == nullptr && redirect_ != nullptr) {
    delete redirect_;
  }
  redirect_ = nullptr;
}
inline const ::circlet::v1::Redirect& CreateRedirectRequest::_internal_redirect() const {
  const ::circlet::v1::Redirect* p = redirect_;
  return p != nullptr ? *p : reinterpret_cast<const ::circlet::v1::Redirect&>(
      ::circlet::v1::_Redirect_default_instance_);
}
inline const ::circlet::v1::Redirect& CreateRedirectRequest::redirect() const {
  // @@protoc_insertion_point(field_get:circlet.v1.CreateRedirectRequest.redirect)
  return _internal_redirect();
}
inline void CreateRedirectRequest::unsafe_arena_set_allocated_redirect(
    ::circlet::v1::Redirect* redirect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redirect_);
  }
  redirect_ = redirect;
  if (redirect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:circlet.v1.CreateRedirectRequest.redirect)
}
inline ::circlet::v1::Redirect* CreateRedirectRequest::release_redirect() {
  
  ::circlet::v1::Redirect* temp = redirect_;
  redirect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::circlet::v1::Redirect* CreateRedirectRequest::unsafe_arena_release_redirect() {
  // @@protoc_insertion_point(field_release:circlet.v1.CreateRedirectRequest.redirect)
  
  ::circlet::v1::Redirect* temp = redirect_;
  redirect_ = nullptr;
  return temp;
}
inline ::circlet::v1::Redirect* CreateRedirectRequest::_internal_mutable_redirect() {
  
  if (redirect_ == nullptr) {
    auto* p = CreateMaybeMessage<::circlet::v1::Redirect>(GetArenaForAllocation());
    redirect_ = p;
  }
  return redirect_;
}
inline ::circlet::v1::Redirect* CreateRedirectRequest::mutable_redirect() {
  ::circlet::v1::Redirect* _msg = _internal_mutable_redirect();
  // @@protoc_insertion_point(field_mutable:circlet.v1.CreateRedirectRequest.redirect)
  return _msg;
}
inline void CreateRedirectRequest::set_allocated_redirect(::circlet::v1::Redirect* redirect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete redirect_;
  }
  if (redirect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::circlet::v1::Redirect>::GetOwningArena(redirect);
    if (message_arena != submessage_arena) {
      redirect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redirect, submessage_arena);
    }
    
  } else {
    
  }
  redirect_ = redirect;
  // @@protoc_insertion_point(field_set_allocated:circlet.v1.CreateRedirectRequest.redirect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace circlet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_redirectservice_2eproto
